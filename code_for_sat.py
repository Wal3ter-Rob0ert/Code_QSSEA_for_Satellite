from machine import Pin, I2C, ADC # type: ignore
import time
import lora  # type: ignore # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è LoRa
import bme680  # type: ignore # –î–∞—Ç—á–∏–∫ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
import dht  # type: ignore # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
import gps  # type: ignore # GPS –º–æ–¥—É–ª—å CAM-M8
import camera  # type: ignore # –ö–∞–º–µ—Ä–∞ IMX477

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
i2c = I2C(0, scl=Pin(22), sda=Pin(21))
bme = bme680.BME680(i2c=i2c)
dht22 = dht.DHT22(Pin(14))
gps_module = gps.GPS(Pin(17, Pin.IN), baudrate=9600)

# LoRa –º–æ–¥—É–ª—å
lora = lora.LoRa(spi_bus=1, freq=868e6, cs=Pin(5), reset=Pin(4))

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
def collect_data():
    # –î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏, –¥–∞–≤–ª–µ–Ω–∏—è
    dht22.measure()
    temperature = dht22.temperature()
    humidity = dht22.humidity()
    pressure = bme.pressure
    co2 = bme.gas

    # –î–∞–Ω–Ω—ã–µ GPS
    latitude, longitude, altitude = gps_module.get_location()

    # –§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
    img = camera.capture()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    data = {
        "temp": temperature,
        "humidity": humidity,
        "pressure": pressure,
        "co2": co2,
        "lat": latitude,
        "lon": longitude,
        "alt": altitude
    }

    return data, img

# –¶–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–∞
while True:
    data, img = collect_data()
    print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ LoRa
    lora.send(str(data).encode())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ LoRa –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–∂–∞—Ç–æ–≥–æ —Ñ–æ—Ç–æ)
    with open("image.jpg", "wb") as f:
        f.write(img)

    time.sleep(60)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É